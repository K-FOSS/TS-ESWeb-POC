diff --git a/node_modules/scheduler/cjs/scheduler-tracing.development.js b/node_modules/scheduler/cjs/scheduler-tracing.development.js
index 8a17c20..be4daa9 100644
--- a/node_modules/scheduler/cjs/scheduler-tracing.development.js
+++ b/node_modules/scheduler/cjs/scheduler-tracing.development.js
@@ -9,8 +9,6 @@
 
 'use strict';
 
-if (process.env.NODE_ENV !== "production") {
-  (function() {
 'use strict';
 
 var DEFAULT_THREAD_ID = 0; // Counters used to generate unique IDs.
@@ -21,32 +19,34 @@ var threadIDCounter = 0; // Set of currently traced interactions.
 // Meaning that newly traced interactions are appended to the previously active set.
 // When an interaction goes out of scope, the previous set (if any) is restored.
 
-exports.__interactionsRef = null; // Listener(s) to notify when interactions begin and end.
+var __interactionsRef = null
+exports.__interactionsRef = __interactionsRef; // Listener(s) to notify when interactions begin and end.
 
-exports.__subscriberRef = null;
+var __subscriberRef = null;
+exports.__subscriberRef = __subscriberRef;
 
 {
-  exports.__interactionsRef = {
+  __interactionsRef = {
     current: new Set()
   };
-  exports.__subscriberRef = {
+  __subscriberRef = {
     current: null
   };
 }
 function unstable_clear(callback) {
 
-  var prevInteractions = exports.__interactionsRef.current;
-  exports.__interactionsRef.current = new Set();
+  var prevInteractions = __interactionsRef.current;
+  __interactionsRef.current = new Set();
 
   try {
     return callback();
   } finally {
-    exports.__interactionsRef.current = prevInteractions;
+    __interactionsRef.current = prevInteractions;
   }
 }
 function unstable_getCurrent() {
   {
-    return exports.__interactionsRef.current;
+    return __interactionsRef.current;
   }
 }
 function unstable_getThreadID() {
@@ -61,14 +61,14 @@ function unstable_trace(name, timestamp, callback) {
     name: name,
     timestamp: timestamp
   };
-  var prevInteractions = exports.__interactionsRef.current; // Traced interactions should stack/accumulate.
+  var prevInteractions = __interactionsRef.current; // Traced interactions should stack/accumulate.
   // To do that, clone the current interactions.
   // The previous set will be restored upon completion.
 
   var interactions = new Set(prevInteractions);
   interactions.add(interaction);
-  exports.__interactionsRef.current = interactions;
-  var subscriber = exports.__subscriberRef.current;
+  __interactionsRef.current = interactions;
+  var subscriber = __subscriberRef.current;
   var returnValue;
 
   try {
@@ -84,7 +84,7 @@ function unstable_trace(name, timestamp, callback) {
       try {
         returnValue = callback();
       } finally {
-        exports.__interactionsRef.current = prevInteractions;
+        __interactionsRef.current = prevInteractions;
 
         try {
           if (subscriber !== null) {
@@ -107,8 +107,8 @@ function unstable_trace(name, timestamp, callback) {
 function unstable_wrap(callback) {
   var threadID = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_THREAD_ID;
 
-  var wrappedInteractions = exports.__interactionsRef.current;
-  var subscriber = exports.__subscriberRef.current;
+  var wrappedInteractions = __interactionsRef.current;
+  var subscriber = __subscriberRef.current;
 
   if (subscriber !== null) {
     subscriber.onWorkScheduled(wrappedInteractions, threadID);
@@ -122,9 +122,9 @@ function unstable_wrap(callback) {
   var hasRun = false;
 
   function wrapped() {
-    var prevInteractions = exports.__interactionsRef.current;
-    exports.__interactionsRef.current = wrappedInteractions;
-    subscriber = exports.__subscriberRef.current;
+    var prevInteractions = __interactionsRef.current;
+    __interactionsRef.current = wrappedInteractions;
+    subscriber = __subscriberRef.current;
 
     try {
       var returnValue;
@@ -137,7 +137,7 @@ function unstable_wrap(callback) {
         try {
           returnValue = callback.apply(undefined, arguments);
         } finally {
-          exports.__interactionsRef.current = prevInteractions;
+          __interactionsRef.current = prevInteractions;
 
           if (subscriber !== null) {
             subscriber.onWorkStopped(wrappedInteractions, threadID);
@@ -167,7 +167,7 @@ function unstable_wrap(callback) {
   }
 
   wrapped.cancel = function cancel() {
-    subscriber = exports.__subscriberRef.current;
+    subscriber = __subscriberRef.current;
 
     try {
       if (subscriber !== null) {
@@ -201,7 +201,7 @@ function unstable_subscribe(subscriber) {
     subscribers.add(subscriber);
 
     if (subscribers.size === 1) {
-      exports.__subscriberRef.current = {
+      __subscriberRef.current = {
         onInteractionScheduledWorkCompleted: onInteractionScheduledWorkCompleted,
         onInteractionTraced: onInteractionTraced,
         onWorkCanceled: onWorkCanceled,
@@ -217,7 +217,7 @@ function unstable_unsubscribe(subscriber) {
     subscribers.delete(subscriber);
 
     if (subscribers.size === 0) {
-      exports.__subscriberRef.current = null;
+      __subscriberRef.current = null;
     }
   }
 }
@@ -343,5 +343,4 @@ exports.unstable_subscribe = unstable_subscribe;
 exports.unstable_trace = unstable_trace;
 exports.unstable_unsubscribe = unstable_unsubscribe;
 exports.unstable_wrap = unstable_wrap;
-  })();
-}
+  
diff --git a/node_modules/scheduler/cjs/scheduler.development.js b/node_modules/scheduler/cjs/scheduler.development.js
index 7d5ec2e..b5644fb 100644
--- a/node_modules/scheduler/cjs/scheduler.development.js
+++ b/node_modules/scheduler/cjs/scheduler.development.js
@@ -9,8 +9,6 @@
 
 'use strict';
 
-if (process.env.NODE_ENV !== "production") {
-  (function() {
 'use strict';
 
 var enableSchedulerDebugging = false;
@@ -23,17 +21,22 @@ var shouldYieldToHost;
 var requestPaint;
 var hasPerformanceNow = typeof performance === 'object' && typeof performance.now === 'function';
 
+var unstable_now;
+var unstable_forceFrameRate;
+
+exports.unstable_now = unstable_now;
+
 if (hasPerformanceNow) {
   var localPerformance = performance;
 
-  exports.unstable_now = function () {
+  unstable_now = function () {
     return localPerformance.now();
   };
 } else {
   var localDate = Date;
   var initialTime = localDate.now();
 
-  exports.unstable_now = function () {
+  unstable_now = function () {
     return localDate.now() - initialTime;
   };
 }
@@ -50,7 +53,7 @@ typeof MessageChannel !== 'function') {
   var _flushCallback = function () {
     if (_callback !== null) {
       try {
-        var currentTime = exports.unstable_now();
+        var currentTime = unstable_now();
         var hasRemainingTime = true;
 
         _callback(hasRemainingTime, currentTime);
@@ -85,7 +88,7 @@ typeof MessageChannel !== 'function') {
     return false;
   };
 
-  requestPaint = exports.unstable_forceFrameRate = function () {};
+  requestPaint = unstable_forceFrameRate = function () {};
 } else {
   // Capture local references to native APIs, in case a polyfill overrides them.
   var _setTimeout = window.setTimeout;
@@ -123,14 +126,14 @@ typeof MessageChannel !== 'function') {
     // `isInputPending` is not available. Since we have no way of knowing if
     // there's pending input, always yield at the end of the frame.
     shouldYieldToHost = function () {
-      return exports.unstable_now() >= deadline;
+      return unstable_now() >= deadline;
     }; // Since we yield every frame regardless, `requestPaint` has no effect.
 
 
     requestPaint = function () {};
   }
 
-  exports.unstable_forceFrameRate = function (fps) {
+  unstable_forceFrameRate = function (fps) {
     if (fps < 0 || fps > 125) {
       // Using console['error'] to evade Babel and ESLint
       console['error']('forceFrameRate takes a positive int between 0 and 125, ' + 'forcing frame rates higher than 125 fps is not supported');
@@ -147,7 +150,7 @@ typeof MessageChannel !== 'function') {
 
   var performWorkUntilDeadline = function () {
     if (scheduledHostCallback !== null) {
-      var currentTime = exports.unstable_now(); // Yield after `yieldInterval` ms, regardless of where we are in the vsync
+      var currentTime = unstable_now(); // Yield after `yieldInterval` ms, regardless of where we are in the vsync
       // cycle. This means there's always time remaining at the beginning of
       // the message event.
 
@@ -191,7 +194,7 @@ typeof MessageChannel !== 'function') {
 
   requestHostTimeout = function (callback, ms) {
     taskTimeoutID = _setTimeout(function () {
-      callback(exports.unstable_now());
+      callback(unstable_now());
     }, ms);
   };
 
@@ -546,7 +549,7 @@ function flushWork(hasTimeRemaining, initialTime) {
         return workLoop(hasTimeRemaining, initialTime);
       } catch (error) {
         if (currentTask !== null) {
-          var currentTime = exports.unstable_now();
+          var currentTime = unstable_now();
           markTaskErrored(currentTask, currentTime);
           currentTask.isQueued = false;
         }
@@ -563,7 +566,7 @@ function flushWork(hasTimeRemaining, initialTime) {
     isPerformingWork = false;
 
     {
-      var _currentTime = exports.unstable_now();
+      var _currentTime = unstable_now();
 
       markSchedulerSuspended(_currentTime);
     }
@@ -589,7 +592,7 @@ function workLoop(hasTimeRemaining, initialTime) {
       var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
       markTaskRun(currentTask, currentTime);
       var continuationCallback = callback(didUserCallbackTimeout);
-      currentTime = exports.unstable_now();
+      currentTime = unstable_now();
 
       if (typeof continuationCallback === 'function') {
         currentTask.callback = continuationCallback;
@@ -693,7 +696,7 @@ function unstable_wrapCallback(callback) {
 }
 
 function unstable_scheduleCallback(priorityLevel, callback, options) {
-  var currentTime = exports.unstable_now();
+  var currentTime = unstable_now();
   var startTime;
 
   if (typeof options === 'object' && options !== null) {
@@ -802,7 +805,7 @@ function unstable_getFirstCallbackNode() {
 function unstable_cancelCallback(task) {
   {
     if (task.isQueued) {
-      var currentTime = exports.unstable_now();
+      var currentTime = unstable_now();
       markTaskCanceled(task, currentTime);
       task.isQueued = false;
     }
@@ -819,7 +822,7 @@ function unstable_getCurrentPriorityLevel() {
 }
 
 function unstable_shouldYield() {
-  var currentTime = exports.unstable_now();
+  var currentTime = unstable_now();
   advanceTimers(currentTime);
   var firstTask = peek(taskQueue);
   return firstTask !== currentTask && currentTask !== null && firstTask !== null && firstTask.callback !== null && firstTask.startTime <= currentTime && firstTask.expirationTime < currentTask.expirationTime || shouldYieldToHost();
@@ -849,5 +852,4 @@ exports.unstable_runWithPriority = unstable_runWithPriority;
 exports.unstable_scheduleCallback = unstable_scheduleCallback;
 exports.unstable_shouldYield = unstable_shouldYield;
 exports.unstable_wrapCallback = unstable_wrapCallback;
-  })();
-}
+  
