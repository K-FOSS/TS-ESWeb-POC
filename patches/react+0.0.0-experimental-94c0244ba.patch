diff --git a/node_modules/react/cjs/react.development.js b/node_modules/react/cjs/react.development.js
index 6aace28..802ea9f 100644
--- a/node_modules/react/cjs/react.development.js
+++ b/node_modules/react/cjs/react.development.js
@@ -6,11 +6,6 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
-
-'use strict';
-
-if (process.env.NODE_ENV !== "production") {
-  (function() {
 'use strict';
 
 var _assign = require('object-assign');
@@ -25,14 +20,14 @@ var ReactVersion = '17.0.0-alpha.0-experimental-94c0244ba';
 // nor polyfill, then a plain number is used for performance.
 var REACT_ELEMENT_TYPE = 0xeac7;
 var REACT_PORTAL_TYPE = 0xeaca;
-exports.Fragment = 0xeacb;
-exports.StrictMode = 0xeacc;
-exports.Profiler = 0xead2;
+var Fragment = 0xeacb;
+var StrictMode = 0xeacc;
+var Profiler = 0xead2;
 var REACT_PROVIDER_TYPE = 0xeacd;
 var REACT_CONTEXT_TYPE = 0xeace;
 var REACT_FORWARD_REF_TYPE = 0xead0;
-exports.Suspense = 0xead1;
-exports.unstable_SuspenseList = 0xead8;
+var Suspense = 0xead1;
+var unstable_SuspenseList = 0xead8;
 var REACT_MEMO_TYPE = 0xead3;
 var REACT_LAZY_TYPE = 0xead4;
 var REACT_BLOCK_TYPE = 0xead9;
@@ -40,22 +35,22 @@ var REACT_SERVER_BLOCK_TYPE = 0xeada;
 var REACT_FUNDAMENTAL_TYPE = 0xead5;
 var REACT_SCOPE_TYPE = 0xead7;
 var REACT_OPAQUE_ID_TYPE = 0xeae0;
-exports.unstable_DebugTracingMode = 0xeae1;
+var unstable_DebugTracingMode = 0xeae1;
 var REACT_OFFSCREEN_TYPE = 0xeae2;
-exports.unstable_LegacyHidden = 0xeae3;
+var unstable_LegacyHidden = 0xeae3;
 
 if (typeof Symbol === 'function' && Symbol.for) {
   var symbolFor = Symbol.for;
   REACT_ELEMENT_TYPE = symbolFor('react.element');
   REACT_PORTAL_TYPE = symbolFor('react.portal');
-  exports.Fragment = symbolFor('react.fragment');
-  exports.StrictMode = symbolFor('react.strict_mode');
-  exports.Profiler = symbolFor('react.profiler');
+  Fragment = symbolFor('react.fragment');
+  StrictMode = symbolFor('react.strict_mode');
+  Profiler = symbolFor('react.profiler');
   REACT_PROVIDER_TYPE = symbolFor('react.provider');
   REACT_CONTEXT_TYPE = symbolFor('react.context');
   REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');
-  exports.Suspense = symbolFor('react.suspense');
-  exports.unstable_SuspenseList = symbolFor('react.suspense_list');
+  Suspense = symbolFor('react.suspense');
+  unstable_SuspenseList = symbolFor('react.suspense_list');
   REACT_MEMO_TYPE = symbolFor('react.memo');
   REACT_LAZY_TYPE = symbolFor('react.lazy');
   REACT_BLOCK_TYPE = symbolFor('react.block');
@@ -63,11 +58,19 @@ if (typeof Symbol === 'function' && Symbol.for) {
   REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');
   REACT_SCOPE_TYPE = symbolFor('react.scope');
   REACT_OPAQUE_ID_TYPE = symbolFor('react.opaque.id');
-  exports.unstable_DebugTracingMode = symbolFor('react.debug_trace_mode');
+  unstable_DebugTracingMode = symbolFor('react.debug_trace_mode');
   REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen');
-  exports.unstable_LegacyHidden = symbolFor('react.legacy_hidden');
+  unstable_LegacyHidden = symbolFor('react.legacy_hidden');
 }
 
+exports.Fragment = Fragment;
+exports.StrictMode = StrictMode;
+exports.Profiler = Profiler;
+exports.Suspense = Suspense
+exports.unstable_SuspenseList = unstable_SuspenseList;
+exports.unstable_DebugTracingMode = unstable_DebugTracingMode;
+exports.unstable_LegacyHidden = unstable_LegacyHidden;
+
 var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
 var FAUX_ITERATOR_SYMBOL = '@@iterator';
 function getIteratorFn(maybeIterable) {
@@ -478,22 +481,22 @@ function getComponentName(type) {
   }
 
   switch (type) {
-    case exports.Fragment:
+    case Fragment:
       return 'Fragment';
 
     case REACT_PORTAL_TYPE:
       return 'Portal';
 
-    case exports.Profiler:
+    case Profiler:
       return "Profiler";
 
-    case exports.StrictMode:
+    case StrictMode:
       return 'StrictMode';
 
-    case exports.Suspense:
+    case Suspense:
       return 'Suspense';
 
-    case exports.unstable_SuspenseList:
+    case unstable_SuspenseList:
       return 'SuspenseList';
   }
 
@@ -1421,7 +1424,7 @@ function isValidElementType(type) {
   } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).
 
 
-  if (type === exports.Fragment || type === exports.Profiler || type === exports.unstable_DebugTracingMode || type === exports.StrictMode || type === exports.Suspense || type === exports.unstable_SuspenseList || type === exports.unstable_LegacyHidden || enableScopeAPI ) {
+  if (type === Fragment || type === Profiler || type === unstable_DebugTracingMode || type === StrictMode || type === Suspense || type === unstable_SuspenseList || type === unstable_LegacyHidden || enableScopeAPI ) {
     return true;
   }
 
@@ -1932,10 +1935,10 @@ function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
   }
 
   switch (type) {
-    case exports.Suspense:
+    case Suspense:
       return describeBuiltInComponentFrame('Suspense');
 
-    case exports.unstable_SuspenseList:
+    case unstable_SuspenseList:
       return describeBuiltInComponentFrame('SuspenseList');
   }
 
@@ -2321,7 +2324,7 @@ function createElementWithValidation(type, props, children) {
     }
   }
 
-  if (type === exports.Fragment) {
+  if (type === Fragment) {
     validateFragmentProps(element);
   } else {
     validatePropTypes(element);
@@ -2439,5 +2442,3 @@ exports.useReducer = useReducer;
 exports.useRef = useRef;
 exports.useState = useState;
 exports.version = ReactVersion;
-  })();
-}
